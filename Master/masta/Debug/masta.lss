
masta.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000232  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000038  00800060  00000232  000002a6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000006cc  00000000  00000000  000002e0  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000097  00000000  00000000  000009ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .comment      0000002f  00000000  00000000  00000a43  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 00000088  00000000  00000000  00000a72  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000003f8  00000000  00000000  00000afa  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000002b0  00000000  00000000  00000ef2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000321  00000000  00000000  000011a2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000011c  00000000  00000000  000014c4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000163  00000000  00000000  000015e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000001f2  00000000  00000000  00001743  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000058  00000000  00000000  00001935  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 41 00 	jmp	0x82	; 0x82 <__vector_13>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e2 e3       	ldi	r30, 0x32	; 50
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a8 39       	cpi	r26, 0x98	; 152
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 85 00 	call	0x10a	; 0x10a <main>
  7a:	0c 94 17 01 	jmp	0x22e	; 0x22e <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__vector_13>:
#include "UART.h"
#include "SPI.h"



ISR(USART_RXC_vect){
  82:	1f 92       	push	r1
  84:	0f 92       	push	r0
  86:	0f b6       	in	r0, 0x3f	; 63
  88:	0f 92       	push	r0
  8a:	11 24       	eor	r1, r1
  8c:	2f 93       	push	r18
  8e:	3f 93       	push	r19
  90:	4f 93       	push	r20
  92:	5f 93       	push	r21
  94:	6f 93       	push	r22
  96:	7f 93       	push	r23
  98:	8f 93       	push	r24
  9a:	9f 93       	push	r25
  9c:	af 93       	push	r26
  9e:	bf 93       	push	r27
  a0:	ef 93       	push	r30
  a2:	ff 93       	push	r31
	
	char data=UART_RxChar();
  a4:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <UART_RxChar>
	if(data=='l'){
  a8:	8c 36       	cpi	r24, 0x6C	; 108
  aa:	49 f4       	brne	.+18     	; 0xbe <__vector_13+0x3c>
		SPI_Write(data);
  ac:	0e 94 9c 00 	call	0x138	; 0x138 <SPI_Write>
		PORTC = 0x01;
  b0:	81 e0       	ldi	r24, 0x01	; 1
  b2:	85 bb       	out	0x15, r24	; 21
		UART_SendString("Light turned on");
  b4:	80 e6       	ldi	r24, 0x60	; 96
  b6:	90 e0       	ldi	r25, 0x00	; 0
  b8:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <UART_SendString>
  bc:	15 c0       	rjmp	.+42     	; 0xe8 <__vector_13+0x66>
	}
	if(data=='a'){
  be:	81 36       	cpi	r24, 0x61	; 97
  c0:	49 f4       	brne	.+18     	; 0xd4 <__vector_13+0x52>
		SPI_Write(data);
  c2:	0e 94 9c 00 	call	0x138	; 0x138 <SPI_Write>
		PORTC = 0x01;
  c6:	81 e0       	ldi	r24, 0x01	; 1
  c8:	85 bb       	out	0x15, r24	; 21
		UART_SendString("Air conditioning turned on");
  ca:	80 e7       	ldi	r24, 0x70	; 112
  cc:	90 e0       	ldi	r25, 0x00	; 0
  ce:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <UART_SendString>
  d2:	0a c0       	rjmp	.+20     	; 0xe8 <__vector_13+0x66>
	}
	if(data=='t'){
  d4:	84 37       	cpi	r24, 0x74	; 116
  d6:	41 f4       	brne	.+16     	; 0xe8 <__vector_13+0x66>
		SPI_Write(data);
  d8:	0e 94 9c 00 	call	0x138	; 0x138 <SPI_Write>
		PORTC = 0x01;
  dc:	81 e0       	ldi	r24, 0x01	; 1
  de:	85 bb       	out	0x15, r24	; 21
		UART_SendString("TV turned on");
  e0:	8b e8       	ldi	r24, 0x8B	; 139
  e2:	90 e0       	ldi	r25, 0x00	; 0
  e4:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <UART_SendString>
	}
}
  e8:	ff 91       	pop	r31
  ea:	ef 91       	pop	r30
  ec:	bf 91       	pop	r27
  ee:	af 91       	pop	r26
  f0:	9f 91       	pop	r25
  f2:	8f 91       	pop	r24
  f4:	7f 91       	pop	r23
  f6:	6f 91       	pop	r22
  f8:	5f 91       	pop	r21
  fa:	4f 91       	pop	r20
  fc:	3f 91       	pop	r19
  fe:	2f 91       	pop	r18
 100:	0f 90       	pop	r0
 102:	0f be       	out	0x3f, r0	; 63
 104:	0f 90       	pop	r0
 106:	1f 90       	pop	r1
 108:	18 95       	reti

0000010a <main>:


int main(void)
{
		
	DDRC=0xFF;
 10a:	8f ef       	ldi	r24, 0xFF	; 255
 10c:	84 bb       	out	0x14, r24	; 20
	SPI_Init();
 10e:	0e 94 93 00 	call	0x126	; 0x126 <SPI_Init>
	SS_Enable;
 112:	c4 98       	cbi	0x18, 4	; 24

	char data;
	UART_init(9600, INTERRUPT_ON);
 114:	41 e0       	ldi	r20, 0x01	; 1
 116:	60 e8       	ldi	r22, 0x80	; 128
 118:	75 e2       	ldi	r23, 0x25	; 37
 11a:	80 e0       	ldi	r24, 0x00	; 0
 11c:	90 e0       	ldi	r25, 0x00	; 0
 11e:	0e 94 a1 00 	call	0x142	; 0x142 <UART_init>
	sei();
 122:	78 94       	sei
 124:	ff cf       	rjmp	.-2      	; 0x124 <main+0x1a>

00000126 <SPI_Init>:
* \Return value:   : None
*******************************************************************************/

void SPI_Init()					/* SPI Initialize function */
{
	DDRB |= (1<<MOSI)|(1<<SCK)|(1<<SS);	/* Make MOSI, SCK, SS 
 126:	87 b3       	in	r24, 0x17	; 23
 128:	80 6b       	ori	r24, 0xB0	; 176
 12a:	87 bb       	out	0x17, r24	; 23
						as Output pin */
	DDRB &= ~(1<<MISO);			/* Make MISO pin 
 12c:	be 98       	cbi	0x17, 6	; 23
						as input pin */
	PORTB |= (1<<SS);			/* Make high on SS pin */
 12e:	c4 9a       	sbi	0x18, 4	; 24
	SPCR = (1<<SPE)|(1<<MSTR)|(1<<SPR0);	/* Enable SPI in master mode
 130:	81 e5       	ldi	r24, 0x51	; 81
 132:	8d b9       	out	0x0d, r24	; 13
						with Fosc/16 */
	SPSR &= ~(1<<SPI2X);			/* Disable speed doubler */
 134:	70 98       	cbi	0x0e, 0	; 14
 136:	08 95       	ret

00000138 <SPI_Write>:
* \Return value:   : None
*******************************************************************************/
void SPI_Write(char data)		/* SPI write data function */
{
	char flush_buffer;
	SPDR = data;			/* Write data to SPI data register */
 138:	8f b9       	out	0x0f, r24	; 15
	while(!(SPSR & (1<<SPIF)));	/* Wait till transmission complete */
 13a:	77 9b       	sbis	0x0e, 7	; 14
 13c:	fe cf       	rjmp	.-4      	; 0x13a <SPI_Write+0x2>
	flush_buffer = SPDR;		/* Flush received data */
 13e:	8f b1       	in	r24, 0x0f	; 15
 140:	08 95       	ret

00000142 <UART_init>:
* \Parameters (in) : baudRate - Baudrate corresponding value
* \Return value:   : None
*******************************************************************************/

void UART_init(long USART_BAUDRATE, Uart_Interrupt_Mode interrupt_mode)
{
 142:	cf 93       	push	r28
 144:	c4 2f       	mov	r28, r20
	UCSRB |= (1 << RXEN) | (1 << TXEN);	/* Turn on transmission and reception */
 146:	2a b1       	in	r18, 0x0a	; 10
 148:	28 61       	ori	r18, 0x18	; 24
 14a:	2a b9       	out	0x0a, r18	; 10
	UCSRC |= (1 << URSEL) | (1 << UCSZ0) | (1 << UCSZ1);/* Use 8-bit char size */
 14c:	20 b5       	in	r18, 0x20	; 32
 14e:	26 68       	ori	r18, 0x86	; 134
 150:	20 bd       	out	0x20, r18	; 32
	UBRRL = BAUD_PRESCALE;			/* Load lower 8-bits of the baud rate */
 152:	dc 01       	movw	r26, r24
 154:	cb 01       	movw	r24, r22
 156:	88 0f       	add	r24, r24
 158:	99 1f       	adc	r25, r25
 15a:	aa 1f       	adc	r26, r26
 15c:	bb 1f       	adc	r27, r27
 15e:	88 0f       	add	r24, r24
 160:	99 1f       	adc	r25, r25
 162:	aa 1f       	adc	r26, r26
 164:	bb 1f       	adc	r27, r27
 166:	9c 01       	movw	r18, r24
 168:	ad 01       	movw	r20, r26
 16a:	22 0f       	add	r18, r18
 16c:	33 1f       	adc	r19, r19
 16e:	44 1f       	adc	r20, r20
 170:	55 1f       	adc	r21, r21
 172:	22 0f       	add	r18, r18
 174:	33 1f       	adc	r19, r19
 176:	44 1f       	adc	r20, r20
 178:	55 1f       	adc	r21, r21
 17a:	60 e0       	ldi	r22, 0x00	; 0
 17c:	72 e1       	ldi	r23, 0x12	; 18
 17e:	8a e7       	ldi	r24, 0x7A	; 122
 180:	90 e0       	ldi	r25, 0x00	; 0
 182:	0e 94 f5 00 	call	0x1ea	; 0x1ea <__udivmodsi4>
 186:	82 2f       	mov	r24, r18
 188:	81 50       	subi	r24, 0x01	; 1
 18a:	89 b9       	out	0x09, r24	; 9
	UBRRH = (BAUD_PRESCALE >> 8);		/* Load upper 8-bits*/
 18c:	da 01       	movw	r26, r20
 18e:	c9 01       	movw	r24, r18
 190:	01 97       	sbiw	r24, 0x01	; 1
 192:	a1 09       	sbc	r26, r1
 194:	b1 09       	sbc	r27, r1
 196:	89 2f       	mov	r24, r25
 198:	9a 2f       	mov	r25, r26
 19a:	ab 2f       	mov	r26, r27
 19c:	bb 27       	eor	r27, r27
 19e:	80 bd       	out	0x20, r24	; 32
	
	
	switch(interrupt_mode){
 1a0:	c1 30       	cpi	r28, 0x01	; 1
 1a2:	21 f4       	brne	.+8      	; 0x1ac <UART_init+0x6a>
		case INTERRUPT_ON:
		GICR = 1<<INT1;	
 1a4:	80 e8       	ldi	r24, 0x80	; 128
 1a6:	8b bf       	out	0x3b, r24	; 59
		UCSRB = (1<<TXCIE) | (1<<RXCIE);
 1a8:	80 ec       	ldi	r24, 0xC0	; 192
 1aa:	8a b9       	out	0x0a, r24	; 10
		break;
		case INTERRUPT_OFF:
		break;
	}

}
 1ac:	cf 91       	pop	r28
 1ae:	08 95       	ret

000001b0 <UART_TxChar>:
* \Parameters (in) : data - data byte to transmit
* \Return value:   : None
*******************************************************************************/
void UART_TxChar(char ch)
{
	while (! (UCSRA & (1<<UDRE)));  /* Wait for empty transmit buffer */
 1b0:	5d 9b       	sbis	0x0b, 5	; 11
 1b2:	fe cf       	rjmp	.-4      	; 0x1b0 <UART_TxChar>
	UDR = ch ;
 1b4:	8c b9       	out	0x0c, r24	; 12
 1b6:	08 95       	ret

000001b8 <UART_SendString>:
* \Reentrancy      : Non Reentrant
* \Parameters (in) : data - data byte to transmit
* \Return value:   : None
*******************************************************************************/
void UART_SendString(char *str)
{
 1b8:	1f 93       	push	r17
 1ba:	cf 93       	push	r28
 1bc:	df 93       	push	r29
 1be:	ec 01       	movw	r28, r24
	unsigned char j=0;
	
	while (str[j]!=0)		/* Send string till null */
 1c0:	88 81       	ld	r24, Y
 1c2:	88 23       	and	r24, r24
 1c4:	51 f0       	breq	.+20     	; 0x1da <UART_SendString+0x22>
* \Parameters (in) : data - data byte to transmit
* \Return value:   : None
*******************************************************************************/
void UART_SendString(char *str)
{
	unsigned char j=0;
 1c6:	10 e0       	ldi	r17, 0x00	; 0
	
	while (str[j]!=0)		/* Send string till null */
	{
		UART_TxChar(str[j]);
 1c8:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <UART_TxChar>
		j++;
 1cc:	1f 5f       	subi	r17, 0xFF	; 255
*******************************************************************************/
void UART_SendString(char *str)
{
	unsigned char j=0;
	
	while (str[j]!=0)		/* Send string till null */
 1ce:	fe 01       	movw	r30, r28
 1d0:	e1 0f       	add	r30, r17
 1d2:	f1 1d       	adc	r31, r1
 1d4:	80 81       	ld	r24, Z
 1d6:	81 11       	cpse	r24, r1
 1d8:	f7 cf       	rjmp	.-18     	; 0x1c8 <UART_SendString+0x10>
	{
		UART_TxChar(str[j]);
		j++;
	}
}
 1da:	df 91       	pop	r29
 1dc:	cf 91       	pop	r28
 1de:	1f 91       	pop	r17
 1e0:	08 95       	ret

000001e2 <UART_RxChar>:
* \Parameters (in) : Nonr
* \Return value:   : data byte received
*******************************************************************************/
unsigned char UART_RxChar()
{
	while ((UCSRA & (1 << RXC)) == 0);/* Wait till data is received */
 1e2:	5f 9b       	sbis	0x0b, 7	; 11
 1e4:	fe cf       	rjmp	.-4      	; 0x1e2 <UART_RxChar>
	return(UDR);		/* Return the byte */
 1e6:	8c b1       	in	r24, 0x0c	; 12
}
 1e8:	08 95       	ret

000001ea <__udivmodsi4>:
 1ea:	a1 e2       	ldi	r26, 0x21	; 33
 1ec:	1a 2e       	mov	r1, r26
 1ee:	aa 1b       	sub	r26, r26
 1f0:	bb 1b       	sub	r27, r27
 1f2:	fd 01       	movw	r30, r26
 1f4:	0d c0       	rjmp	.+26     	; 0x210 <__udivmodsi4_ep>

000001f6 <__udivmodsi4_loop>:
 1f6:	aa 1f       	adc	r26, r26
 1f8:	bb 1f       	adc	r27, r27
 1fa:	ee 1f       	adc	r30, r30
 1fc:	ff 1f       	adc	r31, r31
 1fe:	a2 17       	cp	r26, r18
 200:	b3 07       	cpc	r27, r19
 202:	e4 07       	cpc	r30, r20
 204:	f5 07       	cpc	r31, r21
 206:	20 f0       	brcs	.+8      	; 0x210 <__udivmodsi4_ep>
 208:	a2 1b       	sub	r26, r18
 20a:	b3 0b       	sbc	r27, r19
 20c:	e4 0b       	sbc	r30, r20
 20e:	f5 0b       	sbc	r31, r21

00000210 <__udivmodsi4_ep>:
 210:	66 1f       	adc	r22, r22
 212:	77 1f       	adc	r23, r23
 214:	88 1f       	adc	r24, r24
 216:	99 1f       	adc	r25, r25
 218:	1a 94       	dec	r1
 21a:	69 f7       	brne	.-38     	; 0x1f6 <__udivmodsi4_loop>
 21c:	60 95       	com	r22
 21e:	70 95       	com	r23
 220:	80 95       	com	r24
 222:	90 95       	com	r25
 224:	9b 01       	movw	r18, r22
 226:	ac 01       	movw	r20, r24
 228:	bd 01       	movw	r22, r26
 22a:	cf 01       	movw	r24, r30
 22c:	08 95       	ret

0000022e <_exit>:
 22e:	f8 94       	cli

00000230 <__stop_program>:
 230:	ff cf       	rjmp	.-2      	; 0x230 <__stop_program>
