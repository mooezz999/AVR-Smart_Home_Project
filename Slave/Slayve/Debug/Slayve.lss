
Slayve.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000b4  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  000000b4  00000128  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000006cc  00000000  00000000  00000128  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000097  00000000  00000000  000007f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .comment      0000002f  00000000  00000000  0000088b  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 00000050  00000000  00000000  000008ba  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000187  00000000  00000000  0000090a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000000ff  00000000  00000000  00000a91  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000001f3  00000000  00000000  00000b90  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000068  00000000  00000000  00000d84  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000000c8  00000000  00000000  00000dec  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  00000eb4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 41 00 	call	0x82	; 0x82 <main>
  64:	0c 94 58 00 	jmp	0xb0	; 0xb0 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <SPI_Init>:
* \Parameters (in) : None
* \Return value:   : None
*******************************************************************************/
void SPI_Init()					/* SPI Initialize function */
{
	DDRB &= ~((1<<MOSI)|(1<<SCK)|(1<<SS));  /* Make MOSI, SCK, SS as
  6c:	87 b3       	in	r24, 0x17	; 23
  6e:	8f 74       	andi	r24, 0x4F	; 79
  70:	87 bb       	out	0x17, r24	; 23
 						input pins */
	DDRB |= (1<<MISO);			/* Make MISO pin as 
  72:	be 9a       	sbi	0x17, 6	; 23
						output pin */
	SPCR = (1<<SPE);			/* Enable SPI in slave mode */
  74:	80 e4       	ldi	r24, 0x40	; 64
  76:	8d b9       	out	0x0d, r24	; 13
  78:	08 95       	ret

0000007a <SPI_Receive>:
* \Parameters (in) : None
* \Return value:   : None
*******************************************************************************/
char SPI_Receive()			/* SPI Receive data function */
{
	while(!(SPSR & (1<<SPIF)));	/* Wait till reception complete */
  7a:	77 9b       	sbis	0x0e, 7	; 14
  7c:	fe cf       	rjmp	.-4      	; 0x7a <SPI_Receive>
	return(SPDR);			/* Return received data */
  7e:	8f b1       	in	r24, 0x0f	; 15
}
  80:	08 95       	ret

00000082 <main>:



int main(void)
{
	DDRC=0xFF;
  82:	8f ef       	ldi	r24, 0xFF	; 255
  84:	84 bb       	out	0x14, r24	; 20
	DDRD=0xFF;
  86:	81 bb       	out	0x11, r24	; 17
	DDRA=0xFF;
  88:	8a bb       	out	0x1a, r24	; 26
	SPI_Init();
  8a:	0e 94 36 00 	call	0x6c	; 0x6c <SPI_Init>
    while(1)
    {
     
		data = SPI_Receive();
		if(data=='l'){
			PORTC = 0x04;
  8e:	d4 e0       	ldi	r29, 0x04	; 4
		}
		if(data=='a'){
			PORTA = 0x01;
		}
		if(data=='t'){
			PORTD = 0x08;
  90:	18 e0       	ldi	r17, 0x08	; 8
		data = SPI_Receive();
		if(data=='l'){
			PORTC = 0x04;
		}
		if(data=='a'){
			PORTA = 0x01;
  92:	c1 e0       	ldi	r28, 0x01	; 1
	SPI_Init();
	unsigned char data;
    while(1)
    {
     
		data = SPI_Receive();
  94:	0e 94 3d 00 	call	0x7a	; 0x7a <SPI_Receive>
		if(data=='l'){
  98:	8c 36       	cpi	r24, 0x6C	; 108
  9a:	11 f4       	brne	.+4      	; 0xa0 <main+0x1e>
			PORTC = 0x04;
  9c:	d5 bb       	out	0x15, r29	; 21
  9e:	fa cf       	rjmp	.-12     	; 0x94 <main+0x12>
		}
		if(data=='a'){
  a0:	81 36       	cpi	r24, 0x61	; 97
  a2:	11 f4       	brne	.+4      	; 0xa8 <main+0x26>
			PORTA = 0x01;
  a4:	cb bb       	out	0x1b, r28	; 27
  a6:	f6 cf       	rjmp	.-20     	; 0x94 <main+0x12>
		}
		if(data=='t'){
  a8:	84 37       	cpi	r24, 0x74	; 116
  aa:	a1 f7       	brne	.-24     	; 0x94 <main+0x12>
			PORTD = 0x08;
  ac:	12 bb       	out	0x12, r17	; 18
  ae:	f2 cf       	rjmp	.-28     	; 0x94 <main+0x12>

000000b0 <_exit>:
  b0:	f8 94       	cli

000000b2 <__stop_program>:
  b2:	ff cf       	rjmp	.-2      	; 0xb2 <__stop_program>
